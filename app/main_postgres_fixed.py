from fastapi import FastAPI, Request
import httpx
import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, Column, Integer, String, BigInteger
from sqlalchemy.orm import sessionmaker, declarative_base

load_dotenv()

app = FastAPI()

# DB setup
DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class User(Base):
    __tablename__ = "users_v2"
    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(BigInteger, unique=True, index=True)
    name = Column(String)
    age = Column(Integer)
    gender = Column(String)
    city = Column(String)
    bio = Column(String)
    photo_file_id = Column(String)
    language = Column(String)

Base.metadata.create_all(bind=engine)

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_SECRET_PATH = "/webhook"

user_states = {}
admin_states = {}
ADMINS = [5347187083]  # –í–∫–∞–∂–∏ —Å–≤—ñ–π Telegram ID

@app.get("/")
def root():
    return {"message": "KropLove_Bot is live!"}

@app.post(WEBHOOK_SECRET_PATH)
async def telegram_webhook(request: Request):
    data = await request.json()
    message = data.get("message")
    if not message:
        return {"ok": True}

    chat_id = message["chat"]["id"]
    text = message.get("text")
    photo = message.get("photo")

    # ======= –ú–ï–ù–Æ –ö–û–†–ò–°–¢–£–í–ê–ß–ê =======
    if text == "/start":
        keyboard = {
            "keyboard": [[
                {"text": "–ú–æ—è –∞–Ω–∫–µ—Ç–∞"},
                {"text": "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É"}
            ], [
                {"text": "–ü–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–∫–µ—Ç"},
                {"text": "–•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤"}
            ], [
                {"text": "–ü–æ—á–∞—Ç–∏ —á–∞—Ç"},
                {"text": "–ó—É–ø–∏–Ω–∏—Ç–∏ —á–∞—Ç"}
            ], [
                {"text": "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º"},
                {"text": "–î–æ–ø–æ–º–æ–≥–∞"}
            ]],
            "resize_keyboard": True
        }
        await send_message(chat_id, "–í—ñ—Ç–∞—é! –í–∏–±–µ—Ä–∏ –¥—ñ—é:", keyboard)
        return {"ok": True}

    if text == "–ú–æ—è –∞–Ω–∫–µ—Ç–∞":
        with SessionLocal() as session:
            user = session.query(User).filter_by(telegram_id=chat_id).first()
            if not user:
                await send_message(chat_id, "–ê–Ω–∫–µ—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä–∏ —ó—ó —á–µ—Ä–µ–∑ /start")
            else:
                caption = f"{user.name}, {user.age} —Ä–æ–∫—ñ–≤\n{user.city}\n{user.bio}"
                await send_photo(chat_id, user.photo_file_id, caption)
        return {"ok": True}

    if text == "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É":
        user_states[chat_id] = {"state": "awaiting_name"}
        await send_message(chat_id, "–î–æ–±—Ä–µ, –ø–æ—á–Ω–µ–º–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
        return {"ok": True}

    if text == "–ü–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–∫–µ—Ç":
        await send_message(chat_id, "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Ä–æ–∑—Ä–æ–±–∫–∏...")
        return {"ok": True}

    if text == "–•—Ç–æ –º–µ–Ω–µ –ª–∞–π–∫–Ω—É–≤":
        await send_message(chat_id, "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –ø—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return {"ok": True}

    if text == "–ü–æ—á–∞—Ç–∏ —á–∞—Ç":
        await send_message(chat_id, "–ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞... (—â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ)")
        return {"ok": True}

    if text == "–ó—É–ø–∏–Ω–∏—Ç–∏ —á–∞—Ç":
        await send_message(chat_id, "–ß–∞—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. (—â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ)")
        return {"ok": True}

    if text == "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º":
        await send_message(chat_id, "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º, –∑–∞–ø—Ä–æ—Å–∏ 10 –¥—Ä—É–∑—ñ–≤ –∞–±–æ –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.")
        return {"ok": True}

    if text == "–î–æ–ø–æ–º–æ–≥–∞":
        await send_message(chat_id, "–Ø ‚Äî –±–æ—Ç –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤. –ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Å–µ—Ä–≤—ñ—Å–æ–º.")
        return {"ok": True}

    # ======= –ê–ù–ö–ï–¢–ê =======
    state = user_states.get(chat_id, {}).get("state")

    if not text and state != "awaiting_photo":
        await send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.")
        return {"ok": True}

    if state == "awaiting_name":
        user_states[chat_id]["name"] = text
        user_states[chat_id]["state"] = "awaiting_age"
        await send_message(chat_id, f"–î—è–∫—É—é, {text}! –¢–≤–æ—î —ñ–º‚Äô—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
        return {"ok": True}

    if state == "awaiting_age":
        if not text.isdigit() or not (18 <= int(text) <= 99):
            await send_message(chat_id, "–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–∫ –≤—ñ–¥ 18 –¥–æ 99.")
            return {"ok": True}
        user_states[chat_id]["age"] = int(text)
        user_states[chat_id]["state"] = "awaiting_gender"
        keyboard = {
            "keyboard": [[{"text": "üë®"}, {"text": "üë©"}]],
            "resize_keyboard": True,
            "one_time_keyboard": True
        }
        await send_message(chat_id, "–û–±–µ—Ä–∏ —Å—Ç–∞—Ç—å:", keyboard)
        return {"ok": True}

    if state == "awaiting_gender":
        if text not in ["üë®", "üë©"]:
            await send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å: üë® –∞–±–æ üë©")
            return {"ok": True}
        user_states[chat_id]["gender"] = "—á" if text == "üë®" else "–∂"
        user_states[chat_id]["state"] = "awaiting_city"
        await send_message(chat_id, "–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞?", {"remove_keyboard": True})
        return {"ok": True}

    if state == "awaiting_city":
        user_states[chat_id]["city"] = text
        user_states[chat_id]["state"] = "awaiting_bio"
        await send_message(chat_id, "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ —Å–µ–±–µ:")
        return {"ok": True}

    if state == "awaiting_bio":
        user_states[chat_id]["bio"] = text
        user_states[chat_id]["state"] = "awaiting_photo"
        await send_message(chat_id, "–ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î —Ñ–æ—Ç–æ:")
        return {"ok": True}

    if state == "awaiting_photo":
        if not photo:
            await send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ.")
            return {"ok": True}
        largest = max(photo, key=lambda x: x["file_size"])
        file_id = largest["file_id"]
        data = user_states[chat_id]
        user = User(
            telegram_id=chat_id,
            name=data["name"],
            age=data["age"],
            gender=data["gender"],
            city=data["city"],
            bio=data["bio"],
            photo_file_id=file_id,
            language="uk"
        )
        with SessionLocal() as session:
            session.merge(user)
            session.commit()
        await send_message(chat_id, "–î—è–∫—É—é! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.")
        caption = f"{data['name']}, {data['age']} —Ä–æ–∫—ñ–≤\n{data['city']}\n{data['bio']}"
        await send_photo(chat_id, file_id, caption)
        user_states[chat_id] = {"state": "done"}
        return {"ok": True}

    await send_message(chat_id, "–ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.")
    return {"ok": True}

async def send_message(chat_id: int, text: str, reply_markup: dict = None):
    payload = {"chat_id": chat_id, "text": text}
    if reply_markup:
        payload["reply_markup"] = reply_markup
    async with httpx.AsyncClient() as client:
        await client.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage", json=payload)

async def send_photo(chat_id: int, file_id: str, caption: str):
    payload = {"chat_id": chat_id, "photo": file_id, "caption": caption}
    async with httpx.AsyncClient() as client:
        await client.post(f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto", json=payload)


–û—Å—å –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∏–π —ñ —Ä–æ–±–æ—á–∏–π –∫–æ–¥ –∑ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–º –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–µ –≤–∫–ª—é—á–∞—î –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø—É–Ω–∫—Ç–∏. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –º–æ–∂–µ–º–æ –¥–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–∫–µ—Ç –∞–±–æ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é —á–∞—Ç—É). –ì–æ—Ç–æ–≤–∏–π –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?

