from fastapi import FastAPI, Request
import httpx
import os
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_SECRET_PATH = "/webhook"

LANGUAGES = {
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶": "uk",
    "–†—É—Å—Å–∫–∏–π üá∑üá∫": "ru",
    "English üá¨üáß": "en"
}

user_states = {}

@app.get("/")
def read_root():
    return {"message": "KropLove_Bot is running!"}


@app.post(WEBHOOK_SECRET_PATH)
async def telegram_webhook(req: Request):
    data = await req.json()
    message = data.get("message")

    if not message:
        return {"ok": True}

    chat_id = message["chat"]["id"]
    text = message.get("text", "")
    photo = message.get("photo")

    # /start
    if text == "/start":
        keyboard = {
            "keyboard": [[{"text": lang}] for lang in LANGUAGES.keys()],
            "resize_keyboard": True,
            "one_time_keyboard": True
        }
        await send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –º–æ–≤—É:", keyboard)
        return {"ok": True}

    # –í–∏–±—ñ—Ä –º–æ–≤–∏
    if text in LANGUAGES:
        lang_code = LANGUAGES[text]
        user_states[chat_id] = {"lang": lang_code, "state": "awaiting_name"}

        await send_message(chat_id, f"–¢–∏ –æ–±—Ä–∞–≤ {text}.", {"remove_keyboard": True})
        await send_message(chat_id, "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
        return {"ok": True}

    # –ö—Ä–æ–∫ 1: –Ü–º'—è
    if chat_id in user_states and user_states[chat_id]["state"] == "awaiting_name":
        user_states[chat_id]["name"] = text
        user_states[chat_id]["state"] = "awaiting_age"
        await send_message(chat_id, f"–î—è–∫—É—é, {text}! –¢–≤–æ—î —ñ–º‚Äô—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        await send_message(chat_id, "–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
        return {"ok": True}

    # –ö—Ä–æ–∫ 2: –í—ñ–∫
    if chat_id in user_states and user_states[chat_id]["state"] == "awaiting_age":
        if not text.isdigit():
            await send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚Äî —Å–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤.")
            return {"ok": True}
        user_states[chat_id]["age"] = int(text)
        user_states[chat_id]["state"] = "awaiting_gender"
        keyboard = {
            "keyboard": [[{"text": "—á"}, {"text": "–∂"}]],
            "resize_keyboard": True,
            "one_time_keyboard": True
        }
        await send_message(chat_id, "–û–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç—å:", keyboard)
        return {"ok": True}

    # –ö—Ä–æ–∫ 3: –°—Ç–∞—Ç—å
    if chat_id in user_states and user_states[chat_id]["state"] == "awaiting_gender":
        if text.lower() not in ["—á", "–∂"]:
            await send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å: —á –∞–±–æ –∂")
            return {"ok": True}
        user_states[chat_id]["gender"] = text.lower()
        user_states[chat_id]["state"] = "awaiting_city"
        await send_message(chat_id, "–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞?", {"remove_keyboard": True})
        return {"ok": True}

    # –ö—Ä–æ–∫ 4: –ú—ñ—Å—Ç–æ
    if chat_id in user_states and user_states[chat_id]["state"] == "awaiting_city":
        user_states[chat_id]["city"] = text
        user_states[chat_id]["state"] = "awaiting_bio"
        await send_message(chat_id, "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ —Å–µ–±–µ:")
        return {"ok": True}

    # –ö—Ä–æ–∫ 5: –û–ø–∏—Å
    if chat_id in user_states and user_states[chat_id]["state"] == "awaiting_bio":
        user_states[chat_id]["bio"] = text
        user_states[chat_id]["state"] = "awaiting_photo"
        await send_message(chat_id, "–ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î —Ñ–æ—Ç–æ:")
        return {"ok": True}

    # –ö—Ä–æ–∫ 6: –§–æ—Ç–æ
    if chat_id in user_states and user_states[chat_id]["state"] == "awaiting_photo":
        if not photo:
            await send_message(chat_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ.")
            return {"ok": True}
        user_states[chat_id]["photo_file_id"] = photo[-1]["file_id"]
        user_states[chat_id]["state"] = "done"

        await send_message(chat_id, "–î—è–∫—É—é! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.")
        return {"ok": True}

    await send_message(chat_id, "–ù–∞—Ç–∏—Å–Ω–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.")
    return {"ok": True}


async def send_message(chat_id: int, text: str, reply_markup: dict = None):
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup

    async with httpx.AsyncClient() as client:
        await client.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            json=payload
        )
